import pygame
import sys
import time
import random

# Initialize pygame
pygame.init()

# Constants
SCREEN_WIDTH = 1900  # Screen width
SCREEN_HEIGHT = 1100  # Screen height
GRID_COLS = 38  # Number of columns for smaller grid cells
GRID_ROWS = 22  # Number of rows for smaller grid cells
GRID_SIZE_X = SCREEN_WIDTH // GRID_COLS  # Width of each grid cell
GRID_SIZE_Y = SCREEN_HEIGHT // GRID_ROWS  # Height of each grid cell
HOUSE_SIZE_X = GRID_SIZE_X - 10  # House size slightly smaller than grid cell width
HOUSE_SIZE_Y = GRID_SIZE_Y - 10  # House size slightly smaller than grid cell height
HOUSE_COST = 100  # Cost to place a house
ROAD_COST = 200  # Cost to place a road (higher than house cost)
HOUSE_INCOME = 10  # Income generated by each house every second
NPC_DEATH_TIME = 15  # Time in seconds before NPC dies if no house is reached

# Colors
WHITE = (255, 255, 255)
GRAY = (169, 169, 169)
BLUE = (0, 0, 255)
BROWN = (139, 69, 19)  # Road color (brown)
ROAD_COLOR = BROWN
NPC_COLOR = (255, 0, 0)  # Red NPCs

# Screen Setup
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("House Builder Game")

# Font Setup
font = pygame.font.SysFont("Arial", 24)

# Game Variables
money = 1000  # Starting money
houses = []  # List of placed houses
roads = []  # List of placed roads
npcs = []  # List of NPCs
last_income_time = time.time()  # To track time for income generation


class NPC:
    def __init__(self, x, y):
        """Initialize an NPC at a given location."""
        self.x = x
        self.y = y
        self.size = 15  # Size of the NPC (increased from 5 to 15)
        self.speed = 1  # Speed of the NPC
        self.destination = None  # Destination where the NPC will go
        self.creation_time = time.time()  # Time when the NPC was created
        self.time_since_creation = 0  # Time passed since creation

    def move(self):
        """Move the NPC randomly."""
        if self.destination is None:
            self.destination = (random.randint(0, GRID_COLS - 1) * GRID_SIZE_X, random.randint(0, GRID_ROWS - 1) * GRID_SIZE_Y)

        # Move towards the destination
        dx = self.destination[0] - self.x
        dy = self.destination[1] - self.y
        distance = (dx**2 + dy**2)**0.5

        if distance > self.speed:
            # Normalize direction
            dx /= distance
            dy /= distance
            self.x += dx * self.speed
            self.y += dy * self.speed
        else:
            # Reached destination, choose new destination
            self.x, self.y = self.destination
            self.destination = None

    def check_for_house(self):
        """Check if the NPC has reached a house."""
        for house in houses:
            if house.collidepoint(self.x, self.y):  # Check if the NPC is inside the house
                return True
        return False

    def update(self):
        """Update NPC behavior (move and check for house)."""
        self.move()
        self.time_since_creation = time.time() - self.creation_time

    def draw(self):
        """Draw the NPC on the screen with a larger size."""
        pygame.draw.circle(screen, NPC_COLOR, (int(self.x), int(self.y)), self.size)


def draw_grid():
    """Draw the grid of cells."""
    for x in range(0, SCREEN_WIDTH, GRID_SIZE_X):
        for y in range(0, SCREEN_HEIGHT, GRID_SIZE_Y):
            rect = pygame.Rect(x, y, GRID_SIZE_X, GRID_SIZE_Y)
            pygame.draw.rect(screen, GRAY, rect, 1)

def draw_roads():
    """Draw placed roads."""
    for road in roads:
        pygame.draw.rect(screen, ROAD_COLOR, road)

def draw_houses():
    """Draw placed houses."""
    for house in houses:
        pygame.draw.rect(screen, BLUE, house)

def draw_ui():
    """Draw the UI for money and instructions."""
    text = font.render(f"Money: ${money}", True, (0, 0, 0))
    screen.blit(text, (10, 10))

    instruction_text = font.render(f"Left-click to build a house (Cost ${HOUSE_COST}) | Right-click to build a road (Cost ${ROAD_COST})", True, (0, 0, 0))
    screen.blit(instruction_text, (10, 40))

def handle_click(pos, button):
    """Handle mouse click event."""
    global money

    # Calculate the grid position
    grid_x = (pos[0] // GRID_SIZE_X) * GRID_SIZE_X
    grid_y = (pos[1] // GRID_SIZE_Y) * GRID_SIZE_Y
    house_rect = pygame.Rect(grid_x + 5, grid_y + 5, HOUSE_SIZE_X, HOUSE_SIZE_Y)
    road_rect = pygame.Rect(grid_x, grid_y, GRID_SIZE_X, GRID_SIZE_Y)

    # Left click: Build a house
    if button == 1:
        if money >= HOUSE_COST and road_rect not in roads and house_rect not in houses:
            houses.append(house_rect)
            money -= HOUSE_COST

    # Right click: Build a road
    elif button == 3:
        if money >= ROAD_COST and road_rect not in roads:  # Only add road if it's not already a road and player has enough money
            roads.append(road_rect)
            money -= ROAD_COST  # Deduct the cost of the road

def generate_income():
    """Generate income from houses every second."""
    global money, last_income_time

    # Check if one second has passed
    current_time = time.time()
    if current_time - last_income_time >= 1:
        last_income_time = current_time  # Reset the time
        income = len(houses) * HOUSE_INCOME  # Total income from all houses
        money += income  # Add to player's money

def create_npcs(num_npcs):
    """Create a list of NPCs."""
    for _ in range(num_npcs):
        # Create NPCs at random positions within the grid
        npcs.append(NPC(random.randint(0, GRID_COLS - 1) * GRID_SIZE_X, random.randint(0, GRID_ROWS - 1) * GRID_SIZE_Y))

def remove_dead_npcs():
    """Remove NPCs that have died (did not reach a house in 15 seconds)."""
    global npcs
    npcs = [npc for npc in npcs if npc.time_since_creation <= NPC_DEATH_TIME and not npc.check_for_house()]

def main():
    global money

    # Create 10 NPCs when the game starts
    create_npcs(10)

    running = True
    while running:
        screen.fill(WHITE)

        # Handle events
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:  # Left-click for house
                    handle_click(event.pos, event.button)
                elif event.button == 3:  # Right-click for road
                    handle_click(event.pos, event.button)

        # Generate income from houses
        generate_income()

        # Update NPCs
        for npc in npcs:
            npc.update()

        # Remove NPCs that have died
        remove_dead_npcs()

        # Draw game elements
        draw_grid()
        draw_roads()
        draw_houses()
        for npc in npcs:
            npc.draw()
        draw_ui()

        # Update display
        pygame.display.flip()

        # Cap the frame rate
        pygame.time.Clock().tick(15)

    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()
